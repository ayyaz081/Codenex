name: Portfolio Backend - Build and Deploy

on:
  push:
    branches: [ main, master ]
    paths:
      - 'PortfolioBackend/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'PortfolioBackend/**'
      - 'Dockerfile'

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: 'your-portfolio-app-name'
  AZURE_WEBAPP_PACKAGE_PATH: './PortfolioBackend'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/PortfolioBackend.csproj

    - name: Build application
      run: dotnet build ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/PortfolioBackend.csproj --configuration Release --no-restore

    - name: Run tests
      run: |
        if [ -d "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}.Tests" ]; then
          dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}.Tests --configuration Release --no-build --verbosity normal
        else
          echo "No tests found, skipping test execution"
        fi

    - name: Publish application
      run: dotnet publish ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/PortfolioBackend.csproj --configuration Release --output ./published-app --no-restore

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-app
        path: ./published-app

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './PortfolioBackend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build and push
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/portfolio-backend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Azure App Service Deployment
  deploy-azure:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: published-app
        path: ./published-app

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./published-app

  # AWS ECS Deployment (Alternative)
  deploy-aws:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: false  # Set to true to enable AWS deployment
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to ECS
      run: |
        # Add ECS deployment commands here
        echo "Deploying to ECS..."

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-azure]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health Check
      run: |
        # Replace with your actual deployment URL
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        
        echo "Checking health endpoint: $HEALTH_URL"
        
        for i in {1..10}; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "❌ Health check failed, attempt $i/10"
            if [ $i -eq 10 ]; then
              echo "Health check failed after 10 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Smoke Tests
      run: |
        # Add basic smoke tests here
        echo "Running smoke tests..."
        # Example: Test basic API endpoints
        # curl -f "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
