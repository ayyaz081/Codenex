# CodeNex Nginx Configuration
# Place this file in /etc/nginx/sites-available/codenex
# Then create symlink: sudo ln -s /etc/nginx/sites-available/codenex /etc/nginx/sites-enabled/

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=codenex_limit:10m rate=10r/s;
limit_conn_zone $binary_remote_addr zone=codenex_conn:10m;

# Upstream to .NET application
upstream codenex_backend {
    server 127.0.0.1:7150;
    keepalive 32;
}

# HTTP server - redirect all to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name codenex.live www.codenex.live;

    # Allow Let's Encrypt challenge
    location ^~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/certbot;
        default_type "text/plain";
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name codenex.live www.codenex.live;

    # SSL certificates (will be generated by Certbot)
    ssl_certificate /etc/letsencrypt/live/codenex.live/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/codenex.live/privkey.pem;
    
    # SSL configuration
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/codenex.live/chain.pem;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Logging
    access_log /var/log/nginx/codenex-access.log;
    error_log /var/log/nginx/codenex-error.log warn;

    # Max upload size
    client_max_body_size 100M;
    client_body_timeout 300s;

    # Rate limiting
    limit_req zone=codenex_limit burst=20 nodelay;
    limit_conn codenex_conn 10;

    # Root location - proxy to .NET application
    location / {
        proxy_pass http://codenex_backend;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection keep-alive;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Cache bypass
        proxy_cache_bypass $http_upgrade;
    }

    # Static files caching (if served directly by Nginx - optional)
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://codenex_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection keep-alive;
        proxy_set_header Host $host;
        
        # Cache static files
        expires 30d;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Health check endpoint (no rate limiting)
    location /health {
        proxy_pass http://codenex_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection keep-alive;
        proxy_set_header Host $host;
        access_log off;
        
        # No rate limiting for health checks
        limit_req off;
        limit_conn off;
    }

    # Deny access to .env and sensitive files
    location ~ /\.(env|git|gitignore|htaccess) {
        deny all;
        return 404;
    }
}
